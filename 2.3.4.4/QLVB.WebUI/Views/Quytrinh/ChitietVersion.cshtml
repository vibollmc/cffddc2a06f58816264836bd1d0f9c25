@{
    string jsFlowchart = ViewBag.jsFlowchart;
    int idquytrinh = ViewBag.idquytrinh;
    string strngay = ViewBag.strngay;
}
<style>    
    .TextVersion {
        color: #438EB9;
        font-weight: bold;
    }
</style>
<div id="container-detail" style="overflow:auto">
    <div id="container-flowchart" style="height:98%;width:95%;"></div>
    <div id="ThongtinXuly" style="display:none;"></div>

    @Html.Hidden("jsFlowchart", jsFlowchart)
    @Html.Hidden("NodeId")
    @Html.Hidden("LabelId")
    @Html.Hidden("IsSaveFlowchart", false)
    @Html.Hidden("IsSaveVersion", false)

    <script type="text/javascript">
    var $idContainer = "#" + 'container-flowchart';
    var numberOfElements = 0;
    var nodeid = 'node_';
    var labelid = 'mylabel_';
    var nodebegin = nodeid + 'begin';
    var nodeend = nodeid + 'end';

    $(window).resize(function () {      
        SetFlowchartHeight();
    });
    $(document).ready(function () {        
        SetFlowchartHeight();
        DisplayFlowchart();
        $("[data-toggle=popover]").popover({html:true});        
    });

    function SetFlowchartHeight() {        
        $("#container-detail").height(900).width(1000);
    }

    jsPlumb.ready(function () {
        jsPlumb.importDefaults({
            ConnectionOverlays: [
                ["Arrow", { width: 10, length: 20, location: 1, id: "arrow" }]
            ],
            PaintStyle: {
                lineWidth: 2,
                strokeStyle: "#5c96bc"
            },
            HoverPaintStyle: { strokeStyle: "#1e8151", lineWidth: 2 },
            Connector: ["Flowchart", { stub: [5, 5], midpoint: 0.4, cornerRadius: 3, alwaysRespectStubs: true }],
            anchors: "Continuous",
            Endpoints: [["Rectangle", { width: 10, height: 10 }], ["Dot", { radius: 5 }]],
            EndpointStyles: [{ fillStyle: "#225588" }, { fillStyle: "#558822" }]
        });
    });
    function DisplayFlowchart() {
        //deleteFlowchart();
        var json = $("#jsFlowchart").val();
        if (json.length > 1) {
            RemoveAllNode(json);
            loadFlowchart(json);
        }
    }
    //==============================
    function AddNode(TextNode, id, top, left,xulys) {
        $.each(xulys, function (index, elem) {
            if (elem.Id == id) {                
                strnoidung = "Cán bộ xử lý: <strong>" + elem.strhotencanbo + "</strong></br>";
                strnoidung = strnoidung + "Vai trò xử lý: " + elem.strVaitro + "</br>";
                strnoidung = strnoidung + "Thời gian xử lý: " + elem.intSongay + " ngày";                
                if (elem.intXulyDongthoi == 1) {
                    strnoidung = strnoidung + "</br>Yêu cầu xử lý đồng thời" ;
                }
            }
        });
        var newState = $('<div>').attr('id', id).addClass('window');
        newState = newState.attr('data-toggle', 'popover').attr('content-html', 'true').attr('title', 'Thông tin xử lý');
        newState = newState.attr('data-content', strnoidung).text(TextNode);
        var connect = $('<div>').attr('id', id).text(TextNode);
        newState.css({
            'top': top - 40,
            'left': left
        });       
        $($idContainer).append(newState);
        jsPlumb.makeTarget(newState, {
            anchor: 'Continuous'
        });
        jsPlumb.makeSource(connect, {
            parent: newState,
            anchor: 'Continuous'
        });        
    }

    function DeleteNode(id) {
        var $id = '#' + id
        jsPlumb.detachAllConnections($($id));
        $($id).remove();
    }

    function AddNodeBegin(TextNode, id, top, left) {
        var newState = $('<div>').attr('id', id).addClass('Circle').text(TextNode);
        var connect = $('<div>').attr('id', id).addClass('connect').text(TextNode);
        newState.css({
            'top': top - 40,
            'left': left
        });        
        $($idContainer).append(newState);
        jsPlumb.makeTarget(newState, {
            anchor: 'Continuous'
        });
        jsPlumb.makeSource(connect, {
            parent: newState,
            anchor: 'Continuous'
        });        
    }
    function AddVersion(TextNode) {
        var newState = $('<div>').addClass('TextVersion').text(TextNode);
        newState.css({
            'top': 5,
            'left': 5
        });
        $($idContainer).append(newState);
    }
    //=======================

    function loadFlowchart(flowChartJson) {
        var flowChart = JSON.parse(flowChartJson);
        var nodes = flowChart.nodes;
        var xulys = flowChart.xulys;
        $.each(nodes, function (index, elem) {
            if (elem.Id == nodebegin) {
                AddNodeBegin(elem.text, elem.Id, elem.top, elem.left);
            } else if (elem.Id == nodeend) {
                AddNodeBegin(elem.text, elem.Id, elem.top, elem.left);
            } else {
                AddNode(elem.text, elem.Id, elem.top, elem.left,xulys);
            }
        });
        var connections = flowChart.connections;
        $.each(connections, function (index, elem) {
            var con = jsPlumb.connect({
                source: elem.from,
                target: elem.to
            });
            var label = elem.label;
            if (label != "") {
                var idlabel = SetLabelId(con.id);
                var labeltext = SetLabelText(label, idlabel);
                con.removeOverlay(idlabel);
                con.addOverlay(["Label", { label: labeltext, location: 0.25, id: idlabel, cssClass: "aLabel context-menu-label" }]);
            }
        });
        numberOfElements = flowChart.numberOfElements;
        strNgayApdung = flowChart.strNgayApdung;
        AddVersion(strNgayApdung);
    }

    function deleteFlowchart() {        
        var json = $("#jsFlowchart").val();
        RemoveAllNode(json);
    }
    function RemoveAllNode(flowChartJson) {
        var flowChart = JSON.parse(flowChartJson);
        var nodes = flowChart.nodes;
        $.each(nodes, function (index, elem) {
            jsPlumb.remove(elem.Id);
        });
    }       
    //===================================
    function SetLabelText(text, idlabel) {
        var labeltext = "<span id='" + idlabel + "'>" + text + "</span>";
        return labeltext;
    }
    function GetLabelText(id) {
        var $id = '#' + id;
        var text = $($id).text();
        return text;
    }
    function SetLabelId(connectionid) {
        var _idlabel = labelid + connectionid;
        return _idlabel;
    }
    function GetLabelId(id) {
        var $id = '#' + id;
        var labelid = $($id).find("span").attr("id");
        return labelid;
    }
    function GetConnectionId(_labelid) {
        var connectid = _labelid.substring(8, _labelid.length);
        //var connectid = _labelid.replace(labelid, '');
        return connectid;
    }
    function _SetNodeId(id) {
        $('#NodeId').val(id);
    }
    function _GetNodeId() {
        var id = $('#NodeId').val();
        return id;
    }
    function _SetLabelId(id) {
        $('#LabelId').val(id);
    }
    function _GetLabelId() {
        var id = $('#LabelId').val();
        return id;
    }
    </script>

</div>
