@{
    string jsFlowchart = ViewBag.jsFlowchart;
    int intUpdate = ViewBag.intUpdate;
}

<style>
    .Quytrinh_Chuaxuly {
        
    }
    .Quytrinh_Dangxuly {
        background-color: #c68afe;
    }
    .Quytrinh_Daxuly {
        background-color: #b5c9fe;
    }
    .Quytrinh_Trehan {
        background-color: #fe1111;
    }
    .TextVersion {
        color: #438EB9;
        font-weight: bold;
    }
    .SelectNode{
        background-color: #ff6a00;
    }
</style>
@if (intUpdate == 2)
{
    <div class="box ">
        <header>
            <nav style="padding: 3px;">
                <button id="SaveSelectNodebtn" disabled type="button" class="btn btn-sm btn-primary btn-flat " data-original-title="" title=""><i class="glyphicon glyphicon-floppy-saved"></i>&nbsp;Ghi nhận</button>
                <button id="BackSelectNodebtn" type="button" class="btn btn-sm btn-primary btn-flat " data-original-title="" title=""><i class="glyphicon glyphicon-arrow-left"></i>&nbsp;Quay lại</button>

            </nav>
        </header>
    </div>
}
<div id="container-detail-Quytrinh" >
    <div id="container-flowchart-Quytrinh" style="height:98%;width:98%;"></div>    

    @Html.Hidden("jsFlowchart", jsFlowchart)
    @Html.Hidden("NodeId")
    @Html.Hidden("LabelId")
    @Html.Hidden("IsSaveFlowchart", false)
    @Html.Hidden("IsSaveVersion", false)

    <script type="text/javascript">
        var $idContainer = "#" + 'container-flowchart-Quytrinh';
        var numberOfElements = 0;
        var nodeid = 'node_';
        var labelid = 'mylabel_';
        var nodebegin = nodeid + 'begin';
        var nodeend = nodeid + 'end';

        jsPlumb.ready(function () {
            jsPlumb.importDefaults({
                ConnectionOverlays: [
                    ["Arrow", { width: 10, length: 20, location: 1, id: "arrow" }]
                ],
                PaintStyle: {
                    lineWidth: 2,
                    strokeStyle: "#5c96bc"
                },
                HoverPaintStyle: { strokeStyle: "#1e8151", lineWidth: 2 },
                Connector: ["Flowchart", { stub: [5, 5], midpoint: 0.4, cornerRadius: 3, alwaysRespectStubs: true }],
                anchors: "Continuous",
                Endpoints: [["Rectangle", { width: 10, height: 10 }], ["Dot", { radius: 5 }]],
                EndpointStyles: [{ fillStyle: "#225588" }, { fillStyle: "#558822" }]
            });
        });
        function DisplayFlowchart() {
            //deleteFlowchart();
            var json = $("#jsFlowchart").val();
            if (json.length > 1) {
                RemoveAllNode(json);
                loadFlowchart(json);
            }
        }

        $(window).resize(function () {
            
            SetFlowchartHeight();
        });
        $(document).ready(function () {            
            SetFlowchartHeight();
            DisplayFlowchart();
            $("[data-toggle=popover]").popover({ html: true });
        });

        function SetFlowchartHeight() {            
            $("#container-detail-Quytrinh").height(900).width(1000);
        }
        //==============================
        function AddNode(TextNode, id, top, left, xulys) {           
            $.each(xulys, function (index, elem) {
                if (elem.Id == id) {
                    intTrangthai = elem.inttrangthai;
                    intChon = elem.intChon;                    
                    strnoidung = "Cán bộ xử lý: <strong>" + elem.strhotencanbo + "</strong></br>";
                    strnoidung = strnoidung + "Vai trò xử lý: " + elem.strVaitro + "</br>";
                    strnoidung = strnoidung + "Thời gian xử lý: " + elem.intSongay + " ngày<br/>";
                    if (elem.intXulyDongthoi == 1) {
                        strnoidung = strnoidung + "Yêu cầu xử lý đồng thời </br>";
                    }
                }
            });
            var clsXuly = "";
            var tinhtrang = "";
            var intUpdate = '@intUpdate';
            var clsMenu = "";
            switch (intTrangthai) {
                case 0:
                    tinhtrang = "Chưa xử lý";
                    if (intUpdate == 1) {
                        clsMenu = 'context-menu-node';
                    }
                    if (intUpdate == 2) {                      
                        if (intChon == 1) {
                            clsMenu = 'context-menu-selectnode';
                        }
                    }
                    clsXuly = "Quytrinh_Chuaxuly";
                    break;
                case 1:
                    clsXuly = "Quytrinh_Dangxuly";
                    tinhtrang = "Đang xử lý";
                    break;
                case 2:
                    clsXuly = "Quytrinh_Daxuly";
                    tinhtrang = "Đã hoàn thành";
                    if (intUpdate == 2) {
                        if (intChon == 1) {
                            clsMenu = 'context-menu-selectnode';
                        }
                    }
                    break;
            }
            strnoidung = strnoidung + "Tình trạng xử lý:  <strong>" + tinhtrang +  "<strong>";           
            var newState = $('<div>').attr('id', id).addClass('window').addClass(clsXuly).addClass(clsMenu);

            newState = newState.attr('data-toggle', 'popover').attr('content-html', 'true').attr('title', 'Thông tin xử lý');
            newState = newState.attr('data-content', strnoidung).text(TextNode);
            var connect = $('<div>').attr('id', id).text(TextNode);
            newState.css({
                'top': top - 20,
                'left': left
            });
            $($idContainer).append(newState);
            jsPlumb.makeTarget(newState, {
                anchor: 'Continuous'
            });
            jsPlumb.makeSource(connect, {
                parent: newState,
                anchor: 'Continuous'
            });
        }
        function DeleteNode(id) {
            var $id = '#' + id
            jsPlumb.detachAllConnections($($id));
            $($id).remove();
        }

        function AddNodeBegin(TextNode, id, top, left) {
            var newState = $('<div>').attr('id', id).addClass('Circle').text(TextNode);
            var connect = $('<div>').attr('id', id).addClass('connect').text(TextNode);
            newState.css({
                'top': top - 20,
                'left': left
            });
            $($idContainer).append(newState);
            jsPlumb.makeTarget(newState, {
                anchor: 'Continuous'
            });
            jsPlumb.makeSource(connect, {
                parent: newState,
                anchor: 'Continuous'
            });
        }
        function AddVersion(TextNode) {
            var newState = $('<div>').addClass('TextVersion').text(TextNode);
            newState.css({
                'top': 5,
                'left': 5
            });
            $($idContainer).append(newState);
        }
        //=======================

        function loadFlowchart(flowChartJson) {
            var flowChart = JSON.parse(flowChartJson);
            var nodes = flowChart.nodes;
            var xulys = flowChart.xulys;
            $.each(nodes, function (index, elem) {
                if (elem.Id == nodebegin) {
                    AddNodeBegin(elem.text, elem.Id, elem.top, elem.left);
                } else if (elem.Id == nodeend) {
                    AddNodeBegin(elem.text, elem.Id, elem.top, elem.left);
                } else {
                    AddNode(elem.text, elem.Id, elem.top, elem.left, xulys);
                }
            });
            var connections = flowChart.connections;
            $.each(connections, function (index, elem) {
                var con = jsPlumb.connect({
                    source: elem.from,
                    target: elem.to
                });
                var label = elem.label;
                if (label != "") {
                    var idlabel = SetLabelId(con.id);
                    var labeltext = SetLabelText(label, idlabel);
                    con.removeOverlay(idlabel);
                    con.addOverlay(["Label", { label: labeltext, location: 0.25, id: idlabel, cssClass: "aLabel context-menu-label" }]);
                }
            });
            numberOfElements = flowChart.numberOfElements;
            strNgayApdung = flowChart.strNgayApdung;
            AddVersion(strNgayApdung);
        }

        function deleteFlowchart() {            
            var json = $("#jsFlowchart").val();
            RemoveAllNode(json);
        }
        function RemoveAllNode(flowChartJson) {
            var flowChart = JSON.parse(flowChartJson);
            var nodes = flowChart.nodes;
            $.each(nodes, function (index, elem) {
                jsPlumb.remove(elem.Id);
            });
        }
        //===================================
        $(function () {
            $.contextMenu({
                selector: '.context-menu-node',
                callback: function (key, options) {
                    var id = $(this).attr('id');
                    switch (key) {                        
                        case "xuly":
                            OpenEditThongtinXuly(id);
                            break;
                        default:
                    }
                },
                items: {                   
                    "xuly": { name: "<i class='glyphicon glyphicon-user'></i>&nbsp; Cập nhật cán bộ xử lý" },
                    "sep2": "---------",
                    "quit": { name: "<i class='glyphicon glyphicon-arrow-left'></i>&nbsp;Thoát" }
                }
            });
            $.contextMenu({
                selector: '.context-menu-selectnode',
                callback: function (key, options) {
                    var id = $(this).attr('id');
                    switch (key) {
                        case "xuly":
                            SelectNodeXuly(id);
                            break;
                        default:
                    }
                },
                items: {
                    "xuly": { name: "<i class='glyphicon glyphicon-user'></i>&nbsp; Chọn Bước Xử lý" },
                    "sep2": "---------",
                    "quit": { name: "<i class='glyphicon glyphicon-arrow-left'></i>&nbsp;Thoát" }
                }
            });
        });
        //===================================
        function SetLabelText(text, idlabel) {
            var labeltext = "<span id='" + idlabel + "'>" + text + "</span>";
            return labeltext;
        }
        function GetLabelText(id) {
            var $id = '#' + id;
            var text = $($id).text();
            return text;
        }
        function SetLabelId(connectionid) {
            var _idlabel = labelid + connectionid;
            return _idlabel;
        }      
        function GetConnectionId(_labelid) {
            var connectid = _labelid.substring(8, _labelid.length);
            //var connectid = _labelid.replace(labelid, '');
            return connectid;
        }
        function _SetNodeId(id) {
            $('#NodeId').val(id);
        }
        function _GetNodeId() {
            var id = $('#NodeId').val();
            return id;
        }
        //======================================
        function OpenEditThongtinXuly(id) {           
            var idhoso = GetIdHoso();
            _SetNodeId(id);
            var url = '@Url.Action("_EditHosoQuytrinhXuly", "Hoso")';
            url = url + '?idhoso=' + idhoso;
            url = url + '&NodeId=' + id;
            $('#detail-editThongtinXuly').load(url);
            OpenThongtinXuly();
        }
        function SelectNodeXuly(id) {
            var idhoso = 0;
            idhoso = GetIdHoso();
            var $id = '#' + id;
            var clsSelect = "SelectNode";
            var clsXuly = "Quytrinh_Daxuly";
            var clsMenu = 'context-menu-selectnode';
            var isDaXuly = $($id).hasClass(clsXuly);
            if (isDaXuly) {
                RemoveClass(clsMenu, "Quytrinh_Chuaxuly");
            } else {
                RemoveClass(clsMenu, "Quytrinh_Daxuly");
            }
            var selectNode = $($id).removeClass(clsXuly).addClass(clsSelect);
            ButtonEnable("SaveSelectNodebtn", true);
        }
        function RemoveClass(clsRemove,clsHas) {
            $(".window").each(function (idx, elem) {
                var $elem = $(elem);
                //if ($elem.hasClass(clsHas)) {
                //    $elem.removeClass(clsRemove);
                //}
                if ($elem.hasClass(clsRemove)) {
                    $elem.removeClass(clsRemove);
                }
            });
        }
        function ReloadQuytrinh(idhoso) {
            var url = '@Url.Action("_ChangeQuytrinh", "Hoso")';
            url = url + "?idhoso=" + idhoso;
            url = url + "&update=" + 0;
            $('#detail-ChangeQuytrinh').load(url);
        }
        function GetSelectNode() {            
            var strNodes = "";
            $(".SelectNode").each(function (idx, elem) {
                var $elem = $(elem);               
                strNodes += $elem.attr('id') + ";";
            });           
            return strNodes;
        }
        function SubmitSelectNode() {
            var idhoso = 0;
            idhoso = GetIdHoso();
            var nodes = GetSelectNode();
            $.ajax(
            {
                type: "POST",
                url: '@Url.Action("_ChonBuocXuly", "Hoso")',
                data: { 'idhoso': idhoso, 'NodeId': nodes },
                success: function (data) {
                    ReloadQuytrinh(idhoso);
                    ReloadThongtinxuly();
                    ReloadCanboxuly();
                    DisableToolbar_Quytrinh();
                }
            });
        }
        $("#SaveSelectNodebtn").click(function () {
            SubmitSelectNode();
        });
        $("#BackSelectNodebtn").click(function () {
            CloseChangeQuytrinh();
        });
    </script>

</div>

@(Html.Kendo().Window()
.Name("EditThongtinXuly")
.Draggable()
.AutoFocus(true)
.Title("Cập nhật thông tin xử lý")
.Resizable()
.Width(500)
.HtmlAttributes(new { style = "height:100%;" })
.Visible(false)
.Actions(actions => actions.Close())
.Content(
    @<text>
        <div id="detail-editThongtinXuly">
        </div>
        <script type="text/javascript">
            function CloseThongtinXuly() {
                var window = $("#EditThongtinXuly").data("kendoWindow");
                window.close();
            }
            function OpenThongtinXuly() {
                var window = $("#EditThongtinXuly").data("kendoWindow");
                window.center();
                window.open();
            }
        </script>

    </text>
)
)