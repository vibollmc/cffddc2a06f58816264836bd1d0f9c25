@{
    string jsFlowchart = ViewBag.jsFlowchart;    
}

<style>
    .Quytrinh_Dangxuly {
        background-color: #c68afe;
    }
    .Quytrinh_Dangxuly_Trehan {
        background-color: #fe1111;
    }
    .Quytrinh_Daxuly {
        background-color: #b5c9fe;
    }
    .Quytrinh_Daxuly_Trehan {
        background-color: #063bc8;
    }
    .TextVersion{
        color: #438EB9;
        font-weight:bold;
    }
</style>
@*<button id="InChitietQuytrinhXLbtn" type="button" class="btn btn-sm btn-primary btn-flat ">
    <i class="glyphicon glyphicon-print"></i>&nbsp;In
</button>*@
<div id="container-detail-ViewQuytrinh" >
    <div id="container-flowchart-ViewQuytrinh" style="height:98%;width:98%;"></div>
    
    @Html.Hidden("jsFlowchart", jsFlowchart)
    @Html.Hidden("NodeId")
    @Html.Hidden("LabelId")
    
    <script type="text/javascript">
        var $idContainer = "#" + 'container-flowchart-ViewQuytrinh';
        var numberOfElements = 0;
        var nodeid = 'node_';
        var labelid = 'mylabel_';
        var nodebegin = nodeid + 'begin';
        var nodeend = nodeid + 'end';
        
        jsPlumb.ready(function () {
            jsPlumb.importDefaults({
                ConnectionOverlays: [
                    ["Arrow", { width: 10, length: 20, location: 1, id: "arrow" }]
                ],
                PaintStyle: {
                    lineWidth: 2,
                    strokeStyle: "#5c96bc"                    
                },
                HoverPaintStyle: { strokeStyle: "#1e8151", lineWidth: 2 },
                Connector: ["Flowchart", { stub: [5, 5], midpoint: 0.4, cornerRadius: 3, alwaysRespectStubs: true }],
                anchors: "Continuous",
                Endpoints: [["Rectangle", { width: 10, height: 10 }], ["Dot", { radius: 5 }]],
                EndpointStyles: [{ fillStyle: "#225588" }, { fillStyle: "#558822" }]
            });
        });
        function DisplayFlowchart() {
            //deleteFlowchart();
            var json = $("#jsFlowchart").val();
            if (json.length > 1) {
                RemoveAllNode(json);
                loadFlowchart(json);
            }
        }

        $(window).resize(function () {            
            SetFlowchartHeight();
        });
        $(document).ready(function () {           
            SetFlowchartHeight();
            DisplayFlowchart();
            $("[data-toggle=popover]").popover({ html: true });
        });

        function SetFlowchartHeight() {           
            $("#container-detail-ViewQuytrinh").height(900).width(1000);
        }
        //==============================
        function AddNode(TextNode, id, top, left, xulys) {
            $.each(xulys, function (index, elem) {
                if (elem.Id == id) {
                    intTrangthai = elem.inttrangthai;
                    strnoidung = "Cán bộ xử lý: <strong>" + elem.strhotencanbo + "</strong></br>";
                    strnoidung = strnoidung + "Vai trò xử lý: " + elem.strVaitro + "</br>";
                    strnoidung = strnoidung + "Thời gian xử lý: " + elem.intSongay + " ngày <br/>";
                    if (elem.intXulyDongthoi == 1) {
                        strnoidung =  strnoidung + "Yêu cầu xử lý đồng thời </br>";
                    }
                    strngaybd = elem.strNgaybd;
                    strngaykt = elem.strNgaykt;
                    if (strngaybd != "") {
                        strnoidung = strnoidung + "Ngày bắt đầu: " + strngaybd + "<br/>";
                    }
                    if (strngaykt != "") {
                        strnoidung = strnoidung + "Ngày kết thúc: " + strngaykt + "<br/>";
                    }                    
                }
            });
            var clsXuly = "";
            var tinhtrang = "";            
            switch (intTrangthai) {
                case 0:                    
                    tinhtrang = "Chưa xử lý";
                    break;
                case 1:
                    clsXuly = "Quytrinh_Dangxuly";
                    tinhtrang = "Đang xử lý";
                    break;
                case 11:
                    clsXuly = "Quytrinh_Dangxuly_Trehan";
                    tinhtrang = "Đang xử lý trễ hạn";
                    break;
                case 2:
                    clsXuly = "Quytrinh_Daxuly";
                    tinhtrang = "Đã xử lý";
                    break;
                case 22:
                    clsXuly = "Quytrinh_Daxuly_Trehan";
                    tinhtrang = "Đã xử lý trễ hạn";
                    break;
            }
            strnoidung = strnoidung + "Tình trạng xử lý:  <strong>" + tinhtrang + "</strong><br/>";
            

            var newState = $('<div>').attr('id', id).addClass('window').addClass(clsXuly);
            newState = newState.attr('data-toggle', 'popover').attr('content-html', 'true').attr('title', 'Thông tin xử lý');
            newState = newState.attr('data-content', strnoidung).text(TextNode);
            var connect = $('<div>').attr('id', id).text(TextNode);
            newState.css({
                'top': top - 30,
                'left': left
            });
            $($idContainer).append(newState);
            jsPlumb.makeTarget(newState, {
                anchor: 'Continuous'
            });
            jsPlumb.makeSource(connect, {
                parent: newState,
                anchor: 'Continuous'
            });
        }
        function DeleteNode(id) {
            var $id = '#' + id
            jsPlumb.detachAllConnections($($id));
            $($id).remove();
        }

        function AddNodeBegin(TextNode, id, top, left) {
            var newState = $('<div>').attr('id', id).addClass('Circle').text(TextNode);
            var connect = $('<div>').attr('id', id).addClass('connect').text(TextNode);
            newState.css({
                'top': top - 30,
                'left': left
            });
            $($idContainer).append(newState);
            jsPlumb.makeTarget(newState, {
                anchor: 'Continuous'
            });
            jsPlumb.makeSource(connect, {
                parent: newState,
                anchor: 'Continuous'
            });
        }
        function AddVersion(TextNode) {           
            var newState = $('<div>').addClass('TextVersion').text(TextNode);            
            newState.css({
                'top': 5,
                'left': 5
            });
            $($idContainer).append(newState);            
        }
        //=======================

        function loadFlowchart(flowChartJson) {
            var flowChart = JSON.parse(flowChartJson);
            var nodes = flowChart.nodes;
            var xulys = flowChart.xulys;
            $.each(nodes, function (index, elem) {
                if (elem.Id == nodebegin) {
                    AddNodeBegin(elem.text, elem.Id, elem.top, elem.left);
                } else if (elem.Id == nodeend) {
                    AddNodeBegin(elem.text, elem.Id, elem.top, elem.left);
                } else {
                    AddNode(elem.text, elem.Id, elem.top, elem.left, xulys);
                }
            });
            var connections = flowChart.connections;
            $.each(connections, function (index, elem) {
                var con = jsPlumb.connect({
                    source: elem.from,
                    target: elem.to
                });
                var label = elem.label;
                if (label != "") {
                    var idlabel = SetLabelId(con.id);
                    var labeltext = SetLabelText(label, idlabel);
                    con.removeOverlay(idlabel);
                    con.addOverlay(["Label", { label: labeltext, location: 0.25, id: idlabel, cssClass: "aLabel context-menu-label" }]);
                }
            });
            numberOfElements = flowChart.numberOfElements;
            strNgayApdung = flowChart.strNgayApdung;
            AddVersion(strNgayApdung);
        }

        function deleteFlowchart() {
            var json = $("#jsFlowchart").val();
            RemoveAllNode(json);

            jsPlumb.reset();
            //Clear DOM
            $("#container-detail-ViewQuytrinh").empty();            
        }
        function RemoveAllNode(flowChartJson) {
            var flowChart = JSON.parse(flowChartJson);
            var nodes = flowChart.nodes;
            $.each(nodes, function (index, elem) {
                jsPlumb.remove(elem.Id);
            });
        }
        //===================================
        function SetLabelText(text, idlabel) {
            var labeltext = "<span id='" + idlabel + "'>" + text + "</span>";
            return labeltext;
        }        
        function SetLabelId(connectionid) {
            var _idlabel = labelid + connectionid;
            return _idlabel;
        }      
        function GetConnectionId(_labelid) {
            var connectid = _labelid.substring(8, _labelid.length);
            //var connectid = _labelid.replace(labelid, '');
            return connectid;
        }
        //==================================
        $('#InChitietQuytrinhXLbtn').click(function () {
            PrintElement('#container-detail-ViewQuytrinh');
        })
    </script>

</div>
