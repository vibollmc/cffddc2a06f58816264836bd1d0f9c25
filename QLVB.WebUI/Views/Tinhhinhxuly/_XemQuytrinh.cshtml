@{
    string jsFlowchart = ViewBag.jsFlowchart;
}

<style>
    .TextVersion {
        color: #438EB9;
        font-weight: bold;
    }
</style>

<div id="container-detail-ViewTonghopQuytrinh">
    <div id="container-flowchart-ViewTonghopQuytrinh" style="height:98%;width:98%;"></div>

    @Html.Hidden("jsFlowchartTonghop", jsFlowchart)
  
    <script type="text/javascript">
        var $idContainerTonghop = "#" + 'container-flowchart-ViewTonghopQuytrinh';
        var numberOfElements = 0;
        var nodeid = 'node_';
        var labelid = 'mylabel_';
        var nodebegin = nodeid + 'begin';
        var nodeend = nodeid + 'end';

        var TonghopInstance = jsPlumb.getInstance();
        TonghopInstance.importDefaults({
            ConnectionOverlays: [
                     ["Arrow", { width: 10, length: 20, location: 1, id: "arrow" }]
            ],
            PaintStyle: {
                lineWidth: 2,
                strokeStyle: "#5c96bc"
            },
            HoverPaintStyle: { strokeStyle: "#1e8151", lineWidth: 2 },
            Connector: ["Flowchart", { stub: [5, 5], midpoint: 0.4, cornerRadius: 3, alwaysRespectStubs: true }],
            anchors: "Continuous",
            Endpoints: [["Rectangle", { width: 10, height: 10 }], ["Dot", { radius: 5 }]],
            EndpointStyles: [{ fillStyle: "#225588" }, { fillStyle: "#558822" }]
        });
               
        function DisplayFlowchartTonghop() {            
            var json = $("#jsFlowchartTonghop").val();
            if (json.length > 1) {
                //RemoveAllNodeTonghop(json);
                loadFlowchartTonghop(json);
            }
        }

        $(window).resize(function () {
            SetFlowchartHeightTonghop();
        });
        $(document).ready(function () {
            SetFlowchartHeightTonghop();
            DisplayFlowchartTonghop();
            $("[data-toggle=popover]").popover({ html: true });
        });

        function SetFlowchartHeightTonghop() {
            $("#container-detail-ViewTonghopQuytrinh").height(900).width(1000);
        }
        //==============================
        function AddNodeTonghop(TextNode, id, top, left, xulys) {
            $.each(xulys, function (index, elem) {
                if (elem.Id == id) {
                    intTrangthai = elem.inttrangthai;
                    strnoidung = "Cán bộ xử lý: <strong>" + elem.strhotencanbo + "</strong></br>";
                    strnoidung = strnoidung + "Vai trò xử lý: " + elem.strVaitro + "</br>";
                    strnoidung = strnoidung + "Thời gian xử lý: " + elem.intSongay + " ngày <br/>";
                    if (elem.intXulyDongthoi == 1) {
                        strnoidung =  strnoidung + "Yêu cầu xử lý đồng thời </br>";
                    }
                    if (elem.intSoHoso >0) {
                        intSoHoso = " (" + elem.intSoHoso + ")";
                        clsMenu = 'context-menu-node-tonghop';
                    } else {
                        intSoHoso = "";
                        clsMenu = "";
                    }                    
                }
            });
           
            var newState = $('<div>').attr('id', id).addClass('window').addClass(clsMenu);
            newState = newState.attr('data-toggle', 'popover').attr('content-html', 'true').attr('title', 'Thông tin xử lý');
            newState = newState.attr('data-content', strnoidung).text(TextNode + intSoHoso);

            var connect = $('<div>').attr('id', id).text(TextNode);
            newState.css({
                'top': top - 30,
                'left': left
            });
            $($idContainerTonghop).append(newState);
            TonghopInstance.makeTarget(newState, {
                anchor: 'Continuous'
            });
            TonghopInstance.makeSource(connect, {
                parent: newState,
                anchor: 'Continuous'
            });
        }
        
        function AddNodeBeginTonghop(TextNode, id, top, left) {
            var newState = $('<div>').attr('id', id).addClass('Circle').text(TextNode);
            var connect = $('<div>').attr('id', id).addClass('connect').text(TextNode);
            newState.css({
                'top': top - 30,
                'left': left
            });
            $($idContainerTonghop).append(newState);
            TonghopInstance.makeTarget(newState, {
                anchor: 'Continuous'
            });
            TonghopInstance.makeSource(connect, {
                parent: newState,
                anchor: 'Continuous'
            });
        }
        function AddVersionTonghop(TextNode) {
            var newState = $('<div>').addClass('TextVersion').text(TextNode);
            newState.css({
                'top': 5,
                'left': 5
            });
            $($idContainerTonghop).append(newState);
        }
        //=======================

        function loadFlowchartTonghop(flowChartJson) {
            var flowChart = JSON.parse(flowChartJson);
            var nodes = flowChart.nodes;
            var xulys = flowChart.xulys;
            $.each(nodes, function (index, elem) {
                if (elem.Id == nodebegin) {
                    AddNodeBeginTonghop(elem.text, elem.Id, elem.top, elem.left);
                } else if (elem.Id == nodeend) {
                    AddNodeBeginTonghop(elem.text, elem.Id, elem.top, elem.left);
                } else {
                    AddNodeTonghop(elem.text, elem.Id, elem.top, elem.left, xulys);
                }
            });
            var connections = flowChart.connections;
            $.each(connections, function (index, elem) {               
                var con = TonghopInstance.connect({
                        source: elem.from,
                        target: elem.to
                    });
                var label = elem.label;
                if (label != "") {
                    var idlabel = SetLabelIdTonghop(con.id);
                    var labeltext = SetLabelTextTonghop(label, idlabel);
                    con.removeOverlay(idlabel);
                    con.addOverlay(["Label", { label: labeltext, location: 0.25, id: idlabel, cssClass: "aLabel context-menu-label" }]);
                }
            });
            numberOfElements = flowChart.numberOfElements;
            strNgayApdung = flowChart.strNgayApdung;
            AddVersionTonghop(strNgayApdung);
        }

        function deleteFlowchartTonghop() {
            var json = $("#jsFlowchartTonghop").val();
            RemoveAllNodeTonghop(json);
        }
        function RemoveAllNodeTonghop(flowChartJson) {            
            var flowChart = JSON.parse(flowChartJson);
            var nodes = flowChart.nodes;
            $.each(nodes, function (index, elem) {
                TonghopInstance.remove(elem.Id);
            });
        }
        //===================================
        function SetLabelTextTonghop(text, idlabel) {
            var labeltext = "<span id='" + idlabel + "'>" + text + "</span>";
            return labeltext;
        }
        function SetLabelIdTonghop(connectionid) {
            var _idlabel = labelid + connectionid;
            return _idlabel;
        }
        //==================================
        $(function () {
            $.contextMenu({
                selector: '.context-menu-node-tonghop',
                callback: function (key, options) {
                    var id = $(this).attr('id');
                    switch (key) {
                        case "view":                            
                            ViewVanbanQuytrinh(id);
                            break;   
                        default:
                    }
                },
                items: {
                    "view": { name: "<i class='glyphicon glyphicon-pencil'></i>&nbsp;Xem văn bản" },
                    "quit": { name: "<i class='glyphicon glyphicon-arrow-left'></i>&nbsp;Thoát" }
                }
            });
        })
        function ViewVanbanQuytrinh(id) {
            ViewChitietVanbanQuytrinh(id);
        }
    </script>

</div>
